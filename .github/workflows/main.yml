name: Build .NET MAUI Windows

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4.1.7
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 8.0.x
    - name: Install MAUI workload
      run: dotnet workload install maui
    - name: Decrypt PFX File
      run: |
        echo "${{ secrets.WINDOWS_SIGN_CERT }}" > cert.pfx.asc
        certutil -decode cert.pfx.asc cert.pfx
    - name: Add Cert to Store
      run: certutil -user -q -p ${{ secrets.WINDOWS_CERT_PASS }} -importpfx cert.pfx NoRoot
    - name: Build
      run: dotnet publish Dignation/Dignation.csproj -c Release -f:net8.0-windows10.0.19041.0 /p:GenerateAppxPackageOnBuild=true /p:AppxPackageSigningEnabled=true /p:PackageCertificateThumbprint="${{ secrets.WINDOWS_CERT_THUMBPRINT }}"      
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4.3.3
      with:
        path: .\**\AppPackages\**\*.*
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: .\**\AppPackages\**\*.*
        asset_name: build.zip
        asset_content_type: application/zip
